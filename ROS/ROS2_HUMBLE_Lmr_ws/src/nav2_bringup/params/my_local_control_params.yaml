amcl:  # AMCL定位节点参数
  ros__parameters:  # ROS2参数命名空间
    use_sim_time: False  # 是否使用仿真时间
    # ----------------------
    # 运动模型噪声参数（单位制：米/秒、弧度）
    # 描述里程计的不确定性，需根据机器人运动特性调整
    # ----------------------
    alpha1: 0.01                     # 旋转引起的旋转噪声（如编码器在旋转时的误差）
    alpha2: 0.02                     # 平移引起的旋转噪声（如平移时的方向漂移）
    alpha3: 0.02                     # 平移引起的平移噪声（平移距离误差）
    alpha4: 0.01                     # 旋转引起的平移噪声（旋转时的横向滑动）
    alpha5: 0.05                      # 系统偏差噪声（长期累积的系统性误差）

    base_frame_id: "base_link"  # 机器人基坐标系
    beam_skip_distance: 0.5          # 激光束跳过距离阈值
    beam_skip_error_threshold: 0.9   # 激光束跳过误差阈值
    beam_skip_threshold: 0.3         # 激光束跳过比例阈值
    do_beamskip: false               # 是否启用激光束跳过
    global_frame_id: "map"           # 全局坐标系
    lambda_short: 0.1                # 激光短距离模型参数
    laser_likelihood_max_dist: 2.0   # 激光似然场最大距离
    laser_max_range: 6.0             # 激光最大测量距离
    laser_min_range: 0.01            # 激光最小测量距离
    laser_model_type: "likelihood_field_prob"  # 激光模型类型
    max_beams: 600                   # 最大激光束数
    max_particles: 2000              # 最大粒子数
    min_particles: 1000               # 最小粒子数
    odom_frame_id: "odom"            # 里程计坐标系
    pf_err: 0.05                     # 粒子滤波误差
    pf_z: 0.99                       # 粒子滤波置信度
    recovery_alpha_fast: 0.0         # 快速恢复参数
    recovery_alpha_slow: 0.0         # 慢速恢复参数
    resample_interval: 1             # 重采样间隔
    robot_model_type: "nav2_amcl::DifferentialMotionModel"  # 机器人运动模型类型
    save_pose_rate: 10.0             # 保存位姿频率
    sigma_hit: 0.05                   # 激光命中模型标准差
    tf_broadcast: true               # 是否广播TF
    transform_tolerance: 1.0         # TF容忍时间
    update_min_a: 0.2                # 最小角度更新阈值
    update_min_d: 0.25               # 最小距离更新阈值
    z_hit: 0.9                       # 激光命中概率
    z_max: 0.05                      # 激光最大距离概率
    z_rand: 0.1                      # 激光随机概率
    z_short: 0.05                    # 激光短距离概率
    scan_topic: scan                 # 激光话题名称

bt_navigator:  # 行为树导航器参数
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间
    global_frame: map  # 全局坐标系
    robot_base_frame: base_link  # 机器人基坐标系
    odom_topic: /odom  # 里程计话题
    bt_loop_duration: 100  # 行为树循环周期（毫秒）
    default_server_timeout: 20  # 默认服务超时时间（秒）
    wait_for_service_timeout: 1000  # 等待服务超时时间（毫秒）
    allow_replanning: true
    # 'default_nav_through_poses_bt_xml' 和 'default_nav_to_pose_bt_xml' 使用默认行为树XML文件
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # 可在此处设置或通过launch文件重映射
    plugin_lib_names:  # 行为树插件库列表
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:  # 通过多个位姿导航的行为树节点
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间

bt_navigator_navigate_to_pose_rclcpp_node:  # 导航到单个位姿的行为树节点
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间

controller_server:
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间
    controller_frequency: 10.0  # 控制器执行频率(Hz)
    progress_checker_plugin: "progress_checker"  # 进度检查器插件名称
    controller_plugins: ["FollowPath"] 

  
    FollowPath:
      plugin: "pid_path_tracker::PIDPathTracker"
      robot_base_frame: base_link
      lookahead_dist: 0.15
      desired_linear_vel: 0.15
      max_angular_vel: 1.0
      transform_tolerance: 0.5
      pid:
        kp: 1.0
        ki: 0.5
        kd: 0.5

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"  # 简单进度检查器插件
      required_movement_radius: 0.4 # 要求的最小移动半径(米)
      movement_time_allowance: 3.0  # 允许的最大移动时间(秒)
    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"  # 简单目标检查器插件
      xy_goal_tolerance: 0.15  # XY平面目标位置容忍度(米)
      yaw_goal_tolerance: 0.52  # 偏航角目标容忍度(弧度)
      stateful: True  # 是否保持状态


local_costmap:  # 局部代价地图配置
  local_costmap:
    ros__parameters:
      update_frequency: 5.0  # 地图更新频率(Hz)
      publish_frequency: 5.0  # 地图发布频率(Hz)
      global_frame: odom  # 全局坐标系
      robot_base_frame: base_link  # 机器人基坐标系
      use_sim_time: False  # 是否使用仿真时间
      rolling_window: true  # 是否使用滚动窗口模式
      width: 1  # 地图宽度(米)
      height: 1  # 地图高度(米)
      resolution: 0.01  # 地图分辨率(米/像素)
      robot_radius : 0.15        # 机器人半径(米)
      plugins: ["voxel_layer", "inflation_layer"]  # 使用的插件列表
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 膨胀层插件
        cost_scaling_factor: 0.4 # 代价缩放因子，越小膨胀区域代价越高
        inflation_radius: 0.1  # 膨胀半径(米)
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"  # 体素层插件
        enabled: True  # 是否启用
        publish_voxel_map: True  # 是否发布体素地图
        origin_z: 0.0  # Z轴原点(米)
        z_resolution: 0.02  # Z轴分辨率(米)
        z_voxels: 16  # Z轴体素数量
        max_obstacle_height: 2.0  # 最大障碍物高度(米)
        mark_threshold: 0  # 标记阈值，被多少个射线击中才标记为障碍物
        observation_sources: scan  # 观测源
        scan:
          topic: /scan  # 激光扫描话题
          max_obstacle_height: 2.0  # 最大障碍物高度(米)
          clearing: True  # 是否清除障碍物
          marking: True  # 是否标记障碍物
          data_type: "LaserScan"  # 数据类型
          # raytrace_max_range: 0.5
          # raytrace_min_range: 0.0
          # obstacle_max_range: 0.5
          # obstacle_min_range: 0.0
          raytrace_max_range: 0.5  # 射线追踪最大范围(米)
          raytrace_min_range: 0.0  # 射线追踪最小范围(米)
          obstacle_max_range: 0.5  # 障碍物检测最大范围(米)
          obstacle_min_range: 0.0  # 障碍物检测最小范围(米)
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件
        map_subscribe_transient_local: True  # 使用临时本地订阅模式
      always_send_full_costmap: True  # 是否始终发送完整代价地图

global_costmap:  # 全局代价地图配置
  global_costmap:
    ros__parameters:
      update_frequency: 5.0  # 地图更新频率(Hz)
      publish_frequency: 5.0  # 地图发布频率(Hz)
      global_frame: map  # 全局坐标系
      robot_base_frame: base_link  # 机器人基坐标系
      use_sim_time: False  # 是否使用仿真时间
      robot_radius: 0.15  # 机器人半径(米)
      resolution: 0.02  # 地图分辨率(米/像素)
      track_unknown_space: true  # 是否跟踪未知空间
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]  # 使用的插件列表
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"  # 障碍物层插件
        enabled: True  # 是否启用
        observation_sources: scan  # 观测源
        scan:
          topic: /scan  # 激光扫描话题
          max_obstacle_height: 2.0  # 最大障碍物高度(米)
          clearing: True  # 是否清除障碍物
          marking: True  # 是否标记障碍物
          data_type: "LaserScan"  # 数据类型
          # raytrace_max_range: 1.0
          # raytrace_min_range: 0.0
          # obstacle_max_range: 1.0
          # obstacle_min_range: 0.0
          raytrace_max_range: 3.0  # 射线追踪最大范围(米)
          raytrace_min_range: 0.0  # 射线追踪最小范围(米)
          obstacle_max_range: 3.0  # 障碍物检测最大范围(米)
          obstacle_min_range: 0.0  # 障碍物检测最小范围(米)
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件
        map_subscribe_transient_local: True  # 使用临时本地订阅模式
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 膨胀层插件
        cost_scaling_factor: 0.6  # 代价缩放因子
        inflation_radius: 0.15  # 膨胀半径(米)
      always_send_full_costmap: False  # 是否始终发送完整代价地图

map_server:  # 地图服务器参数
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""  # 地图YAML文件路径

map_saver:  # 地图保存器参数
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间
    save_map_timeout: 5.0  # 保存地图超时时间(秒)
    free_thresh_default: 0.25  # 默认自由空间阈值
    occupied_thresh_default: 0.65  # 默认占用空间阈值
    map_subscribe_transient_local: True  # 使用临时本地订阅模式

planner_server:  # 规划器服务器参数
  ros__parameters:
    expected_planner_frequency: 10.0  # 期望的规划频率(Hz)
    use_sim_time: False  # 是否使用仿真时间
    planner_plugins: ["GridBased"]  # 规划器插件列表
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"  # 基于导航函数的全局规划器
      tolerance: 0.3 # 规划容忍度(米)
      use_astar: true  # 是否使用A*算法，false则使用Dijkstra算法
      allow_unknown: true  # 是否允许规划穿过未知区域

# planner_server:
#   ros__parameters:
#     planner_plugins: ["GridBased"]

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerHybrid" # In Iron and older versions, "/" was used instead of "::"
#       downsample_costmap: false           # whether or not to downsample the map
#       downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       tolerance: 15.0                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
#       allow_unknown: true                 # allow traveling in unknown space
#       max_iterations: -1             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
#       max_planning_time: 5.0              # max time in s for planner to plan, smooth
#       motion_model_for_search: "DUBIN"    # Hybrid-A* Dubin, Redds-Shepp
#       angle_quantization_bins: 36         # Number of angle bins for search
#       analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
#       analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
#       analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
#       analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
#       minimum_turning_radius: 0.18        # minimum turning radius in m of path / vehicle
#       reverse_penalty: 0.001                # Penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.001                # Penalty to apply if motion is changing directions (L to R), must be >= 0
#       non_straight_penalty: 0.001           # Penalty to apply if motion is non-straight, must be => 1
#       cost_penalty: 0.001                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#       retrospective_penalty: 0.30
#       lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
#       cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
#       debug_visualizations: false         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
#       use_quadratic_cost_penalty: False
#       downsample_obstacle_heuristic: True
#       allow_primitive_interpolation: False
#       coarse_search_resolution: 4         # Number of bins to skip when doing a coarse search for the path. Only used for all_direction goal heading mode.
#       goal_heading_mode: "DEFAULT"        # DEFAULT, BIDIRECTIONAL, ALL_DIRECTION
#       smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path

#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true
#         refinement_num: 2

smoother_server:  # 平滑器服务器参数
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间
    smoother_plugins: ["simple_smoother"]  # 平滑器插件列表
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"  # 简单路径平滑器
      tolerance: 1.0e-10  # 收敛容忍度
      max_its: 1000  # 最大迭代次数
      do_refinement: True  # 是否进行精细化处理

behavior_server:  # 行为服务器参数
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw  # 代价地图话题
    footprint_topic: local_costmap/published_footprint  # 机器人足迹话题
    cycle_frequency: 10.0  # 行为执行频率(Hz)
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]  # 行为插件列表
    spin:
      plugin: "nav2_behaviors/Spin"  # 原地旋转行为插件
    backup:
      plugin: "nav2_behaviors/BackUp"  # 后退行为插件
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"  # 沿指定方向行驶插件
    wait:
      plugin: "nav2_behaviors/Wait"  # 等待行为插件
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"  # 辅助遥控行为插件
    global_frame: odom  # 全局坐标系
    robot_base_frame: base_link  # 机器人基坐标系
    transform_tolerance: 0.1  # 坐标变换容忍时间(秒)
    use_sim_time: False  # 是否使用仿真时间
    simulate_ahead_time: 2.0  # 前向模拟时间(秒)
    max_rotational_vel: 1.0  # 最大旋转速度(弧度/秒)
    min_rotational_vel: 0.8  # 最小旋转速度(弧度/秒)
    rotational_acc_lim: 1.  # 旋转加速度限制(弧度/秒²)

robot_state_publisher:  # 机器人状态发布器参数
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间

waypoint_follower:  # 路径点跟随器参数
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间
    loop_rate: 20  # 循环频率(Hz)
    stop_on_failure: false  # 失败时是否停止
    waypoint_task_executor_plugin: "wait_at_waypoint"  # 路径点任务执行器插件
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"  # 在路径点等待插件
      enabled: True  # 是否启用
      waypoint_pause_duration: 200  # 在路径点暂停时间(毫秒)

velocity_smoother:  # 速度平滑器参数
  ros__parameters:
    use_sim_time: False  # 是否使用仿真时间
    smoothing_frequency: 20.0  # 平滑频率(Hz)
    scale_velocities: False  # 是否缩放速度
    feedback: "OPEN_LOOP"  # 反馈类型，开环控制
    max_velocity: [1.0, 0.0, 3.0]  # 最大速度[x, y, theta]，单位：米/秒，弧度/秒
    min_velocity: [-1.0, 0.0, -3.0]  # 最小速度[x, y, theta]，单位：米/秒，弧度/秒
    # max_velocity: [30, 0.0, 70]
    # min_velocity: [-30, 0.0, -70]
    max_accel: [0.6, 0.0, 1.]  # 最大加速度[x, y, theta]，单位：米/秒²，弧度/秒²
    max_decel: [-0.6, 0.0, -1.]  # 最大减速度[x, y, theta]，单位：米/秒²，弧度/秒²
    # max_accel: [4.0, 0.0, 5.0]
    # max_decel: [-4.0, 0.0, -5.0]
    odom_topic: "odom"  # 里程计话题
    odom_duration: 0.1  # 里程计数据有效时间(秒)
    deadband_velocity: [0.0, 0.0, 0.0]  # 死区速度[x, y, theta]，低于此值不输出
    velocity_timeout: 1.0  # 速度超时时间(秒)，超过此时间未收到速度命令则停止
